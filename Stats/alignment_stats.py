#! /usr/bin/env python

from optparse import OptionParser
import os
import os.path
import sys
import re
import numpy
import json

class Align_Stats:
	def __init__(self, debug=False):
		self.debug = debug
	
	def runCommandLine(self, systemCall):
		#run the call and return the status
		print 'Starting %s' % (systemCall)
		status = os.system(systemCall)
		return(status)

	# @param align_file the alignment file ouput by running "ionstats alignment -i run.bam -o run.alignment"
	# @returns the median read length
	def getMedianFromAlignFile(self, align_file):
		align_json = json.load(open(align_file))
		if self.debug:
			print "%s json data for align_json['full']: %s"%(align_file, align_json['full'])
		return self.getMedianFromHisto(align_json['full']['read_length_histogram'], align_json['full']['num_reads'])

	# Calculates the medain read length from a histogram of read lengths.
	# In a histogram, each positino in the graph (or list here) is a read length, and the value at each position is the number of reads that have that length
	# Therefore to calculate the median, simply add the total number of reads until you hit 50% of the reads, and there's your median.
	# @param histogram a list containing the histogram generated by ionstats or gathered from the proton or pgm.
	# @param total_num_reads the total number of reads in the histogram.
	# @returns the median read length
	def getMedianFromHisto(self, histogram, total_num_reads):
		med = 0
		num_reads = 0
		for i in xrange(len(histogram)):
			num_reads += (histogram[i])
			if num_reads > (total_num_reads/2):
				med = i 
				break
		return med

	# runs ionstats to generate the statistics on the alignment file, particularly the read length histogram
	# @param bam the bam file on which to calculate the median read length
	# @returns the medain read length of the bam file
	def calcMedianFromBam(self, bam):
		align_file = "%s.alignment"%bam.split('.bam')[0]
		command = "ionstats alignment -i %s -o %s "%(bam, align_file)
		# run the command and check the output status
		status = self.runCommandLine(command)
		if status == 0:
			print "Gathering medain read length from %s "%align_file
			med = self.getMedianFromAlignFile(options.input)
			if self.debug:
				print "Not removing %s"%align_file
			else:
				os.remove(align_file)
			return med
		else:
			print "ERROR: ionstats failed on %s :("%bam
			sys.exit(1)

if __name__ == '__main__':

	# set up the option parser
	parser = OptionParser()
	
	# add the options to parse
	parser.add_option('-i', '--input', dest='input', help='The input bam or alignment file of which you wish to gather stats. currently on the median read length is reported. ')
	parser.add_option('-o', '--output', dest='output', help='The output file. If no output file is specified, output will be written to the screen')
	parser.add_option('-d', '--debug', dest='debug', action='store_true', help='Will not delete the bam.alignment file generated and will print more info to the screen.')

	(options, args) = parser.parse_args()

	if not options.input:
		print "USAGE ERROR-- --input file is required"
		parser.print_help()
		sys.exit(1)
	if not os.path.isfile(options.input):
		print "USAGE ERROR-- %s not found"%options.input
		parser.print_help()
		sys.exit(1)

	Align_Stats = Align_Stats(options.debug)
	if re.search(".bam", options.input):
		med = Align_Stats.calcMedianFromBam(options.input)
	elif re.search(".alignment", options.input):
		print "Gathering medain read length from %s "%options.input
		med = Align_Stats.getMedianFromAlignFile(options.input)

	print "median read length: %d" %med

